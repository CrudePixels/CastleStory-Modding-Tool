using System;
using System.IO;
using System.Text;

namespace CastleStoryMods
{
    public class RobustLadderIntegration
    {
        public static bool IntegrateLadders()
        {
            try
            {
                Console.WriteLine("üîß Castle Story Ladder Integration Tool");
                Console.WriteLine("=====================================");
                Console.WriteLine();
                
                // Find Castle Story installation
                var gamePath = FindCastleStoryInstallation();
                if (string.IsNullOrEmpty(gamePath))
                {
                    Console.WriteLine("‚ùå Castle Story installation not found!");
                    Console.WriteLine("Please make sure Castle Story is installed via Steam.");
                    return false;
                }
                
                Console.WriteLine($"‚úÖ Found Castle Story at: {gamePath}");
                
                // Create mod directory structure
                var modsPath = Path.Combine(gamePath, "Info", "Lua", "Mods");
                var ladderModPath = Path.Combine(modsPath, "LadderMod");
                
                Directory.CreateDirectory(ladderModPath);
                Console.WriteLine($"üìÅ Created mod directory: {ladderModPath}");
                
                // Generate ladder mod files
                GenerateLadderModFiles(ladderModPath);
                
                // Create mod loader integration
                CreateModLoaderIntegration(gamePath);
                
                Console.WriteLine();
                Console.WriteLine("üéâ Ladder integration completed successfully!");
                Console.WriteLine("üìù The following ladders have been added:");
                Console.WriteLine("   ‚Ä¢ Wooden Ladder (2 wood)");
                Console.WriteLine("   ‚Ä¢ Iron Ladder (1 iron + 1 wood)");
                Console.WriteLine("   ‚Ä¢ Stone Ladder (2 stone)");
                Console.WriteLine("   ‚Ä¢ Rope Ladder (3 rope + 1 wood)");
                Console.WriteLine();
                Console.WriteLine("üéÆ Start Castle Story and check the building menu!");
                
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error during integration: {ex.Message}");
                return false;
            }
        }
        
        private static string? FindCastleStoryInstallation()
        {
            var possiblePaths = new[]
            {
                @"D:\SteamLibrary\steamapps\common\Castle Story",
                @"C:\Program Files (x86)\Steam\steamapps\common\Castle Story",
                @"C:\Steam\steamapps\common\Castle Story",
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), "Steam", "steamapps", "common", "Castle Story"),
                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles), "Steam", "steamapps", "common", "Castle Story")
            };
            
            foreach (var path in possiblePaths)
            {
                if (Directory.Exists(path) && File.Exists(Path.Combine(path, "CastleStory.exe")))
                {
                    return path;
                }
            }
            
            return null;
        }
        
        private static void GenerateLadderModFiles(string modPath)
        {
            // Create mod.json
            var modJson = @"{
    ""name"": ""LadderMod"",
    ""version"": ""1.0.0"",
    ""author"": ""Castle Story Modding Tool"",
    ""description"": ""Adds climbable ladders to Castle Story"",
    ""dependencies"": [],
    ""loadOrder"": 100
}";
            File.WriteAllText(Path.Combine(modPath, "mod.json"), modJson);
            Console.WriteLine("üìÑ Created mod.json");
            
            // Create ladder blocks definition
            var ladderBlocks = GenerateLadderBlocksLua();
            File.WriteAllText(Path.Combine(modPath, "ladder_blocks.lua"), ladderBlocks);
            Console.WriteLine("üìÑ Created ladder_blocks.lua");
            
            // Create ladder mechanics
            var ladderMechanics = GenerateLadderMechanicsLua();
            File.WriteAllText(Path.Combine(modPath, "ladder_mechanics.lua"), ladderMechanics);
            Console.WriteLine("üìÑ Created ladder_mechanics.lua");
            
            // Create main mod file
            var mainMod = GenerateMainModLua();
            File.WriteAllText(Path.Combine(modPath, "main.lua"), mainMod);
            Console.WriteLine("üìÑ Created main.lua");
        }
        
        private static string GenerateLadderBlocksLua()
        {
            var sb = new StringBuilder();
            sb.AppendLine("-- Ladder Blocks for Castle Story");
            sb.AppendLine("-- Generated by Castle Story Modding Tool");
            sb.AppendLine();
            sb.AppendLine("if not BuildingBlocks then");
            sb.AppendLine("    BuildingBlocks = {}");
            sb.AppendLine("end");
            sb.AppendLine();
            sb.AppendLine("-- Wooden Ladder");
            sb.AppendLine("BuildingBlocks[\"ladder_wood\"] = {");
            sb.AppendLine("    name = \"Wooden Ladder\",");
            sb.AppendLine("    category = \"building\",");
            sb.AppendLine("    material = \"wood\",");
            sb.AppendLine("    durability = 100,");
            sb.AppendLine("    cost = { wood = 2 },");
            sb.AppendLine("    icon = \"ladder_wood_icon\",");
            sb.AppendLine("    model = \"ladder_wood_model\",");
            sb.AppendLine("    canClimb = true,");
            sb.AppendLine("    climbSpeed = 2.0,");
            sb.AppendLine("    maxHeight = 50");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("-- Iron Ladder");
            sb.AppendLine("BuildingBlocks[\"ladder_iron\"] = {");
            sb.AppendLine("    name = \"Iron Ladder\",");
            sb.AppendLine("    category = \"building\",");
            sb.AppendLine("    material = \"iron\",");
            sb.AppendLine("    durability = 200,");
            sb.AppendLine("    cost = { iron = 1, wood = 1 },");
            sb.AppendLine("    icon = \"ladder_iron_icon\",");
            sb.AppendLine("    model = \"ladder_iron_model\",");
            sb.AppendLine("    canClimb = true,");
            sb.AppendLine("    climbSpeed = 3.0,");
            sb.AppendLine("    maxHeight = 75");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("-- Stone Ladder");
            sb.AppendLine("BuildingBlocks[\"ladder_stone\"] = {");
            sb.AppendLine("    name = \"Stone Ladder\",");
            sb.AppendLine("    category = \"building\",");
            sb.AppendLine("    material = \"stone\",");
            sb.AppendLine("    durability = 300,");
            sb.AppendLine("    cost = { stone = 2 },");
            sb.AppendLine("    icon = \"ladder_stone_icon\",");
            sb.AppendLine("    model = \"ladder_stone_model\",");
            sb.AppendLine("    canClimb = true,");
            sb.AppendLine("    climbSpeed = 1.6,");
            sb.AppendLine("    maxHeight = 100");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("-- Rope Ladder");
            sb.AppendLine("BuildingBlocks[\"ladder_rope\"] = {");
            sb.AppendLine("    name = \"Rope Ladder\",");
            sb.AppendLine("    category = \"building\",");
            sb.AppendLine("    material = \"rope\",");
            sb.AppendLine("    durability = 50,");
            sb.AppendLine("    cost = { rope = 3, wood = 1 },");
            sb.AppendLine("    icon = \"ladder_rope_icon\",");
            sb.AppendLine("    model = \"ladder_rope_model\",");
            sb.AppendLine("    canClimb = true,");
            sb.AppendLine("    climbSpeed = 2.4,");
            sb.AppendLine("    maxHeight = 40");
            sb.AppendLine("}");
            
            return sb.ToString();
        }
        
        private static string GenerateLadderMechanicsLua()
        {
            var sb = new StringBuilder();
            sb.AppendLine("-- Ladder Mechanics for Castle Story");
            sb.AppendLine("-- Generated by Castle Story Modding Tool");
            sb.AppendLine();
            sb.AppendLine("if not LadderSystem then");
            sb.AppendLine("    LadderSystem = {}");
            sb.AppendLine("end");
            sb.AppendLine();
            sb.AppendLine("-- Ladder configuration");
            sb.AppendLine("LadderSystem.Config = {");
            sb.AppendLine("    enabled = true,");
            sb.AppendLine("    maxHeight = 50,");
            sb.AppendLine("    climbSpeed = 2.0,");
            sb.AppendLine("    autoSnap = true,");
            sb.AppendLine("    grabDistance = 2.0,");
            sb.AppendLine("    releaseDistance = 3.0,");
            sb.AppendLine("    snapDistance = 1.5,");
            sb.AppendLine("    climbHeight = 1.0,");
            sb.AppendLine("    fallDamage = false,");
            sb.AppendLine("    minLevel = 1,");
            sb.AppendLine("    requiresBlueprint = false,");
            sb.AppendLine("    maxPerPlayer = 10,");
            sb.AppendLine("    cooldown = 0.5");
            sb.AppendLine("}");
            sb.AppendLine();
            sb.AppendLine("-- Initialize ladder system");
            sb.AppendLine("function LadderSystem.Initialize()");
            sb.AppendLine("    print(\"LadderMod: Initializing ladder system...\")");
            sb.AppendLine("    -- Register ladder blocks with the building system");
            sb.AppendLine("    if BuildingBlocks then");
            sb.AppendLine("        for blockId, blockData in pairs(BuildingBlocks) do");
            sb.AppendLine("            if blockData.canClimb then");
            sb.AppendLine("                print(\"LadderMod: Registered ladder block: \" .. blockId)");
            sb.AppendLine("            end");
            sb.AppendLine("        end");
            sb.AppendLine("    end");
            sb.AppendLine("    print(\"LadderMod: Ladder system initialized successfully!\")");
            sb.AppendLine("end");
            sb.AppendLine();
            sb.AppendLine("-- Auto-initialize when loaded");
            sb.AppendLine("LadderSystem.Initialize()");
            
            return sb.ToString();
        }
        
        private static string GenerateMainModLua()
        {
            var sb = new StringBuilder();
            sb.AppendLine("-- LadderMod Main File");
            sb.AppendLine("-- Generated by Castle Story Modding Tool");
            sb.AppendLine();
            sb.AppendLine("print(\"LadderMod: Loading ladder mod...\")");
            sb.AppendLine();
            sb.AppendLine("-- Load ladder blocks");
            sb.AppendLine("dofile(\"Mods/LadderMod/ladder_blocks.lua\")");
            sb.AppendLine();
            sb.AppendLine("-- Load ladder mechanics");
            sb.AppendLine("dofile(\"Mods/LadderMod/ladder_mechanics.lua\")");
            sb.AppendLine();
            sb.AppendLine("print(\"LadderMod: Ladder mod loaded successfully!\")");
            
            return sb.ToString();
        }
        
        private static void CreateModLoaderIntegration(string gamePath)
        {
            var dataPath = Path.Combine(gamePath, "Info", "Lua", "Data");
            var mainLuaPath = Path.Combine(dataPath, "Main.lua");
            
            if (File.Exists(mainLuaPath))
            {
                var content = File.ReadAllText(mainLuaPath);
                
                if (!content.Contains("LadderMod"))
                {
                    var modLoaderCode = "\n\n-- Load LadderMod\nif file_exists('Mods/LadderMod/main.lua') then\n    dofile('Mods/LadderMod/main.lua')\nend\n";
                    
                    // Create backup
                    File.Copy(mainLuaPath, mainLuaPath + ".backup", true);
                    
                    // Append mod loader
                    File.AppendAllText(mainLuaPath, modLoaderCode);
                    Console.WriteLine("üìÑ Updated Main.lua to load LadderMod");
                }
                else
                {
                    Console.WriteLine("üìÑ Main.lua already configured for LadderMod");
                }
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  Warning: Main.lua not found, mod may not load automatically");
            }
        }
        
        public static void Main(string[] args)
        {
            Console.WriteLine("Castle Story Ladder Integration Tool");
            Console.WriteLine("====================================");
            Console.WriteLine();
            
            bool success = IntegrateLadders();
            
            if (success)
            {
                Console.WriteLine();
                Console.WriteLine("üéâ Integration completed successfully!");
            }
            else
            {
                Console.WriteLine();
                Console.WriteLine("‚ùå Integration failed!");
            }
            
            Console.WriteLine();
            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();
        }
    }
}
